// This file is auto-generated by @hey-api/openapi-ts

export type DeltaData = {
    Distance: Array<number>
    Gap: Array<number>
}

export type DriverLapData = {
    driver: string
    team: string
    color: string
    session_data: StintData
    stints: Array<StintData>
    laps: Array<LapTimingData>
}

export type DriverTelemetryComparison = {
    driver: string
    color: string
    comparison: DeltaData
}

export type DriverTelemetryData = {
    driver: string
    color: string
    telemetry: TelemetryData
}

export type ECompound = "SOFT" | "MEDIUM" | "HARD" | "INTERMEDIATE" | "WET" | "TEST_UNKNOWN"

export type HttpValidationError = {
    detail?: Array<ValidationError>
}

export type LapSelectionData = {
    driver_lap_data: Array<DriverLapData>
    low_decile: number
    high_decile: number
    min_time: number
    max_time: number
}

export type LapTimingData = {
    LapTime: number | null
    IsPB: boolean
    Sector1Time: number | null
    Sector2Time: number | null
    Sector3Time: number | null
    ST1: number | null
    ST2: number | null
    ST3: number | null
    Stint: number | null
    TyreLife: number | null
    Compound: ECompound | null
    IsOutlap: boolean
    IsInlap: boolean
    IsBestS1: boolean
    IsBestS2: boolean
    IsBestS3: boolean
    IsBestST1: boolean
    IsBestST2: boolean
    IsBestST3: boolean
    IsPBS1: boolean
    IsPBS2: boolean
    IsPBS3: boolean
}

export type PracticeResult = {
    Driver: string
    DriverNumber: string
    CountryCode: string
    TeamId: string
    TeamName: string
    Time_: number | null
    Gap: number | null
}

export type QualifyingResult = {
    Driver: string
    DriverNumber: string
    CountryCode: string
    TeamId: string
    TeamName: string
    Q1Time: number | null
    Q2Time: number | null
    Q3Time: number | null
}

export type RaceResult = {
    Driver: string
    DriverNumber: string
    CountryCode: string
    TeamId: string
    TeamName: string
    GridPosition: number
    Status: string
    Points: number
    Time: number | null
    Gap: number | null
}

export type ScheduledEvent = {
    RoundNumber: number
    Country: string
    EventDate: string | null
    EventName: string
    OfficialEventName: string
    EventFormat: string
    Session1: SessionIdentifier
    Session1Date: string | null
    Session1DateUtc: string | null
    Session2: SessionIdentifier
    Session2Date: string | null
    Session2DateUtc: string | null
    Session3: SessionIdentifier
    Session3Date: string | null
    Session3DateUtc: string | null
    Session4: SessionIdentifier | null
    Session4Date: string | null
    Session4DateUtc: string | null
    Session5: SessionIdentifier | null
    Session5Date: string | null
    Session5DateUtc: string | null
    F1ApiSupport: boolean
}

export type SessionIdentifier =
    | "Race"
    | "Qualifying"
    | "Sprint"
    | "Sprint Qualifying"
    | "Sprint Shootout"
    | "Practice 1"
    | "Practice 2"
    | "Practice 3"

export type SessionQuery = {
    driver: string
    lap_filter: Array<number> | null
}

export type SessionQueryFilter = {
    queries: Array<SessionQuery>
}

export type SessionSummary = {
    weather: SessionWeather
    summary: Summary
}

export type SessionWeather = {
    air_temp_start: number
    air_temp_finish: number
    track_temp_start: number
    track_temp_finish: number
    humidity_start: number
    humidity_finish: number
}

export type StintData = {
    total_laps: number
    avg_time: number
    min_time: number
    max_time: number
    median: number
    low_quartile: number
    high_quartile: number
}

export type Summary = {
    start_time: string | null
    finish_time: string | null
    round_name: string
    official_name: string
    session_type: string
}

export type TelemetryComparison = {
    reference: string
    telemetries: Array<DriverTelemetryComparison>
}

export type TelemetryData = {
    Throttle: Array<number>
    Brake: Array<boolean>
    Gear: Array<number>
    Speed: Array<number>
    RPM: Array<number>
    Time: Array<number>
    RelativeDistance: Array<number>
    Distance: Array<number>
}

export type TelemetryRequest = {
    driver: string
    lap_filter: Array<number>
}

export type ValidationError = {
    loc: Array<string | number>
    msg: string
    type: string
}

export type GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostData = {
    body: SessionQueryFilter
    path: {
        year: string
        round_number: string
        session_identifier: SessionIdentifier
    }
    query?: never
    url: "/season/{year}/round/{round_number}/session/{session_identifier}/laps"
}

export type GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostError =
    GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostErrors[keyof GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostErrors]

export type GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostResponses = {
    /**
     * Successful Response
     */
    200: LapSelectionData
}

export type GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostResponse =
    GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostResponses[keyof GetSessionLaptimesSeasonYearRoundRoundNumberSessionSessionIdentifierLapsPostResponses]

export type GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostData = {
    body: Array<TelemetryRequest>
    path: {
        year: string
        round_number: string
        session_identifier: SessionIdentifier
    }
    query?: never
    url: "/season/{year}/round/{round_number}/session/{session_identifier}/telemetry/comparison"
}

export type GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostError =
    GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostErrors[keyof GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostErrors]

export type GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostResponses = {
    /**
     * Successful Response
     */
    200: TelemetryComparison
}

export type GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostResponse =
    GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostResponses[keyof GetSessionTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierTelemetryComparisonPostResponses]

export type GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetData =
    {
        body?: never
        path: {
            year: string
            round_number: string
            session_identifier: SessionIdentifier
            lap: string
            driver: string
        }
        query?: never
        url: "/season/{year}/round/{round_number}/session/{session_identifier}/lap/{lap}/driver/{driver}/telemetry"
    }

export type GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetErrors =
    {
        /**
         * Validation Error
         */
        422: HttpValidationError
    }

export type GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetError =
    GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetErrors[keyof GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetErrors]

export type GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetResponses =
    {
        /**
         * Successful Response
         */
        200: DriverTelemetryData
    }

export type GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetResponse =
    GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetResponses[keyof GetSessionLapDriverTelemetrySeasonYearRoundRoundNumberSessionSessionIdentifierLapLapDriverDriverTelemetryGetResponses]

export type GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostData = {
    body: Array<TelemetryRequest>
    path: {
        year: string
        round_number: string
        session_identifier: SessionIdentifier
    }
    query?: never
    url: "/season/{year}/round/{round_number}/session/{session_identifier}/telemetries"
}

export type GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostError =
    GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostErrors[keyof GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostErrors]

export type GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostResponses = {
    /**
     * Successful Response
     */
    200: Array<DriverTelemetryData>
}

export type GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostResponse =
    GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostResponses[keyof GetSessionLapTelemetriesSeasonYearRoundRoundNumberSessionSessionIdentifierTelemetriesPostResponses]

export type GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostData = {
    body: SessionQueryFilter
    path: {
        year: string
        round_number: string
        day: number
    }
    query?: never
    url: "/season/{year}/testing_round/{round_number}/day/{day}/laps"
}

export type GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostError =
    GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostErrors[keyof GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostErrors]

export type GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostResponses = {
    /**
     * Successful Response
     */
    200: LapSelectionData
}

export type GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostResponse =
    GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostResponses[keyof GetTestingSessionLaptimesSeasonYearTestingRoundRoundNumberDayDayLapsPostResponses]

export type GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostData = {
    body: Array<TelemetryRequest>
    path: {
        year: string
        round_number: string
        day: number
    }
    query?: never
    url: "/season/{year}/testing_round/{round_number}/day/{day}/telemetry/comparison"
}

export type GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostError =
    GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostErrors[keyof GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostErrors]

export type GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostResponses = {
    /**
     * Successful Response
     */
    200: TelemetryComparison
}

export type GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostResponse =
    GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostResponses[keyof GetTestingSessionTelemetrySeasonYearTestingRoundRoundNumberDayDayTelemetryComparisonPostResponses]

export type GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetData =
    {
        body?: never
        path: {
            year: string
            round_number: string
            day: number
            lap: string
            driver: string
        }
        query?: never
        url: "/season/{year}/testing_round/{round_number}/day/{day}/lap/{lap}/driver/{driver}/telemetry"
    }

export type GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetErrors =
    {
        /**
         * Validation Error
         */
        422: HttpValidationError
    }

export type GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetError =
    GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetErrors[keyof GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetErrors]

export type GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetResponses =
    {
        /**
         * Successful Response
         */
        200: DriverTelemetryData
    }

export type GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetResponse =
    GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetResponses[keyof GetTestingSessionLapDriverTelemetrySeasonYearTestingRoundRoundNumberDayDayLapLapDriverDriverTelemetryGetResponses]

export type GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostData = {
    body: Array<TelemetryRequest>
    path: {
        year: string
        round_number: string
        day: number
    }
    query?: never
    url: "/season/{year}/testing_round/{round_number}/day/{day}/telemetries"
}

export type GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostError =
    GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostErrors[keyof GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostErrors]

export type GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostResponses = {
    /**
     * Successful Response
     */
    200: Array<DriverTelemetryData>
}

export type GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostResponse =
    GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostResponses[keyof GetTestingSessionLapTelemetriesSeasonYearTestingRoundRoundNumberDayDayTelemetriesPostResponses]

export type GetPracticeResultsSessionResultsPracticeGetData = {
    body?: never
    path?: never
    query: {
        year: string
        round: string
        type: "Practice 1" | "Practice 2" | "Practice 3"
    }
    url: "/session/results/practice"
}

export type GetPracticeResultsSessionResultsPracticeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetPracticeResultsSessionResultsPracticeGetError =
    GetPracticeResultsSessionResultsPracticeGetErrors[keyof GetPracticeResultsSessionResultsPracticeGetErrors]

export type GetPracticeResultsSessionResultsPracticeGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PracticeResult>
}

export type GetPracticeResultsSessionResultsPracticeGetResponse =
    GetPracticeResultsSessionResultsPracticeGetResponses[keyof GetPracticeResultsSessionResultsPracticeGetResponses]

export type GetRacelikeResultsSessionResultsRacelikeGetData = {
    body?: never
    path?: never
    query: {
        year: string
        round: string
        type: "Sprint" | "Race"
    }
    url: "/session/results/racelike"
}

export type GetRacelikeResultsSessionResultsRacelikeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetRacelikeResultsSessionResultsRacelikeGetError =
    GetRacelikeResultsSessionResultsRacelikeGetErrors[keyof GetRacelikeResultsSessionResultsRacelikeGetErrors]

export type GetRacelikeResultsSessionResultsRacelikeGetResponses = {
    /**
     * Successful Response
     */
    200: Array<RaceResult>
}

export type GetRacelikeResultsSessionResultsRacelikeGetResponse =
    GetRacelikeResultsSessionResultsRacelikeGetResponses[keyof GetRacelikeResultsSessionResultsRacelikeGetResponses]

export type GetQualifyingResultsSessionResultsQualilikeGetData = {
    body?: never
    path?: never
    query: {
        year: string
        round: string
        type: "Qualifying" | "Sprint Shootout" | "Sprint Qualifying"
    }
    url: "/session/results/qualilike"
}

export type GetQualifyingResultsSessionResultsQualilikeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetQualifyingResultsSessionResultsQualilikeGetError =
    GetQualifyingResultsSessionResultsQualilikeGetErrors[keyof GetQualifyingResultsSessionResultsQualilikeGetErrors]

export type GetQualifyingResultsSessionResultsQualilikeGetResponses = {
    /**
     * Successful Response
     */
    200: Array<QualifyingResult>
}

export type GetQualifyingResultsSessionResultsQualilikeGetResponse =
    GetQualifyingResultsSessionResultsQualilikeGetResponses[keyof GetQualifyingResultsSessionResultsQualilikeGetResponses]

export type GetTestingResultsSessionResultsTestingGetData = {
    body?: never
    path?: never
    query: {
        year: string
        round: string
        day: number
    }
    url: "/session/results/testing"
}

export type GetTestingResultsSessionResultsTestingGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetTestingResultsSessionResultsTestingGetError =
    GetTestingResultsSessionResultsTestingGetErrors[keyof GetTestingResultsSessionResultsTestingGetErrors]

export type GetTestingResultsSessionResultsTestingGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PracticeResult>
}

export type GetTestingResultsSessionResultsTestingGetResponse =
    GetTestingResultsSessionResultsTestingGetResponses[keyof GetTestingResultsSessionResultsTestingGetResponses]

export type YearEventsSeasonYearGetData = {
    body?: never
    path: {
        year: number
    }
    query?: never
    url: "/season/{year}"
}

export type YearEventsSeasonYearGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type YearEventsSeasonYearGetError = YearEventsSeasonYearGetErrors[keyof YearEventsSeasonYearGetErrors]

export type YearEventsSeasonYearGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ScheduledEvent>
}

export type YearEventsSeasonYearGetResponse = YearEventsSeasonYearGetResponses[keyof YearEventsSeasonYearGetResponses]

export type YearTelemetryEventsSeasonYearTelemetryGetData = {
    body?: never
    path: {
        year: number
    }
    query?: never
    url: "/season/{year}/telemetry"
}

export type YearTelemetryEventsSeasonYearTelemetryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type YearTelemetryEventsSeasonYearTelemetryGetError =
    YearTelemetryEventsSeasonYearTelemetryGetErrors[keyof YearTelemetryEventsSeasonYearTelemetryGetErrors]

export type YearTelemetryEventsSeasonYearTelemetryGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ScheduledEvent>
}

export type YearTelemetryEventsSeasonYearTelemetryGetResponse =
    YearTelemetryEventsSeasonYearTelemetryGetResponses[keyof YearTelemetryEventsSeasonYearTelemetryGetResponses]

export type GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetData = {
    body?: never
    path: {
        year: number
        round_number: string
        session_identifier: SessionIdentifier
    }
    query?: never
    url: "/season/{year}/round/{round_number}/session/{session_identifier}/summary"
}

export type GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetError =
    GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetErrors[keyof GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetErrors]

export type GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetResponses = {
    /**
     * Successful Response
     */
    200: SessionSummary
}

export type GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetResponse =
    GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetResponses[keyof GetSessionSummarySeasonYearRoundRoundNumberSessionSessionIdentifierSummaryGetResponses]

export type GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetData = {
    body?: never
    path: {
        year: number
        testing_round: string
        day: number
    }
    query?: never
    url: "/season/{year}/round/{testing_round}/day/{day}/summary"
}

export type GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetError =
    GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetErrors[keyof GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetErrors]

export type GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetResponses = {
    /**
     * Successful Response
     */
    200: SessionSummary
}

export type GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetResponse =
    GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetResponses[keyof GetTestingSessionSummarySeasonYearRoundTestingRoundDayDaySummaryGetResponses]

export type ClientOptions = {
    baseUrl: `${string}://src` | (string & {})
}
