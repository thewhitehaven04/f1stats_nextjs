// This file is auto-generated by @hey-api/openapi-ts

export type AverageTelemetryPlotData = {
    driver: string
    team: TeamPlotStyleDto
    style: "default" | "alternative"
    stint_length: number
    telemetry: Array<TelemetryMeasurementDto>
}

export type Compound =
    | "SOFT"
    | "MEDIUM"
    | "HARD"
    | "INTERMEDIATE"
    | "WET"
    | "UNKNOWN"
    | "TEST_UNKNOWN"

export type DeltaInstance = {
    relative_distance: number
    distance: number
    gap: number
}

export type DriverLapData = {
    team: TeamPlotStyleDto
    driver: string
    style: "default" | "alternative"
    session_data: StintData
    stints: Array<StintData>
    laps: Array<LapTimingData>
}

export type DriverTelemetryDelta = {
    reference: string
    delta: Array<DeltaInstance>
}

export type DriverTelemetryPlotData = {
    driver: string
    team: TeamPlotStyleDto
    style: "default" | "alternative"
    lap: LapTelemetryDto
    delta: DriverTelemetryDelta | null
}

export type HttpValidationError = {
    detail?: Array<ValidationError>
}

export type LapSelectionData = {
    driver_lap_data: Array<DriverLapData>
    low_decile: number | null
    high_decile: number | null
    min_time: number | null
    max_time: number | null
}

export type LapTelemetryDto = {
    id: number
    lap_number: number
    telemetry: Array<TelemetryMeasurementDto>
    lap_distance: number
}

export type LapTimingData = {
    id: number
    laptime: number
    is_pb: boolean
    sector_1_time: number | null
    sector_2_time: number | null
    sector_3_time: number | null
    speedtrap_1: number | null
    speedtrap_2: number | null
    speedtrap_fl: number | null
    stint: number
    compound_id: Compound
    is_inlap: boolean
    is_outlap: boolean
    is_best_s1: boolean
    is_best_s2: boolean
    is_best_s3: boolean
    is_best_st1: boolean
    is_best_st2: boolean
    is_best_stfl: boolean
    is_personal_best_s1: boolean
    is_personal_best_s2: boolean
    is_personal_best_s3: boolean
}

export type SessionIdentifier =
    | "Race"
    | "Qualifying"
    | "Sprint"
    | "Sprint Qualifying"
    | "Sprint Shootout"
    | "Practice 1"
    | "Practice 2"
    | "Practice 3"

export type SessionQuery = {
    driver: string
    lap_filter: Array<number> | null
}

export type SessionQueryFilter = {
    queries: Array<SessionQuery>
}

export type StintData = {
    total_laps: number
    avg_time: number | null
    min_time: number | null
    max_time: number | null
    median: number | null
    low_quartile: number | null
    high_quartile: number | null
    deg_rate: number | null
}

export type TeamPlotStyleDto = {
    name: string
    color: string
}

export type TelemetryMeasurementDto = {
    speed: number
    rpm: number
    throttle: number
    brake: number
    gear: number
    laptime_at: number
    distance: number
    relative_distance: number
}

export type ValidationError = {
    loc: Array<string | number>
    msg: string
    type: string
}

export type GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostData = {
    body: SessionQueryFilter
    path: {
        year: string
        event: string
        session: SessionIdentifier
    }
    query?: never
    url: "/api/season/{year}/event/{event}/session/{session}/laps"
}

export type GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostError =
    GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostErrors[keyof GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostErrors]

export type GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostResponses = {
    /**
     * Successful Response
     */
    200: LapSelectionData
}

export type GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostResponse =
    GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostResponses[keyof GetSessionLaptimesFilteredApiSeasonYearEventEventSessionSessionLapsPostResponses]

export type GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostData = {
    body: SessionQueryFilter
    path: {
        year: string
        event: string
        session: SessionIdentifier
    }
    query?: never
    url: "/api/season/{year}/event/{event}/session/{session}/telemetries"
}

export type GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostError =
    GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostErrors[keyof GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostErrors]

export type GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostResponses = {
    /**
     * Successful Response
     */
    200: Array<DriverTelemetryPlotData>
}

export type GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostResponse =
    GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostResponses[keyof GetLapTelemetriesApiSeasonYearEventEventSessionSessionTelemetriesPostResponses]

export type GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostData = {
    body: SessionQueryFilter
    path: {
        year: string
        event: string
        session: SessionIdentifier
    }
    query?: never
    url: "/api/season/{year}/event/{event}/session/{session}/telemetry/average"
}

export type GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostError =
    GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostErrors[keyof GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostErrors]

export type GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostResponses =
    {
        /**
         * Successful Response
         */
        200: Array<AverageTelemetryPlotData>
    }

export type GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostResponse =
    GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostResponses[keyof GetAveragedTelemetryApiSeasonYearEventEventSessionSessionTelemetryAveragePostResponses]

export type ClientOptions = {
    baseUrl: `${string}://src` | (string & {})
}
