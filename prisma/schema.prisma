generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model compounds {
  id   String @id @db.VarChar(16)
  laps laps[]
}

model driver_numbers {
  driver_id     String  @db.VarChar(64)
  season_year   Int     @db.SmallInt
  driver_number Int     @db.SmallInt
  drivers       drivers @relation(fields: [driver_id], references: [id], onUpdate: NoAction, map: "fk_driver_id")
  seasons       seasons @relation(fields: [season_year], references: [season_year], onUpdate: NoAction, map: "fk_season_year")

  @@id([driver_id, season_year])
}

model driver_team_changes {
  driver_id       String    @db.VarChar(64)
  timestamp_start DateTime  @db.Timestamp(6)
  timestamp_end   DateTime? @db.Timestamp(6)
  team_id         Int       @db.SmallInt
  drivers         drivers   @relation(fields: [driver_id], references: [id], onUpdate: NoAction, map: "fk_driver_id")
  teams           teams     @relation(fields: [team_id], references: [id], onUpdate: NoAction, map: "fk_team_id")

  @@id([driver_id, timestamp_start])
}

model drivers {
  id                  String                @id @db.VarChar(64)
  country_alpha3      String                @db.VarChar(3)
  abbreviation        String                @db.VarChar(3)
  first_name          String
  last_name           String
  driver_numbers      driver_numbers[]
  driver_team_changes driver_team_changes[]
  laps                laps[]
  session_results     session_results[]
}

model event_formats {
  event_format_name String   @id @db.VarChar(32)
  events            events[]
}

model event_sessions {
  event_name                   String
  season_year                  Int                            @db.SmallInt
  session_type_id              String                         @db.VarChar(32)
  start_time                   DateTime                       @db.Timestamp(6)
  end_time                     DateTime                       @db.Timestamp(6)
  events                       events                         @relation(fields: [event_name, season_year], references: [event_name, season_year], onUpdate: NoAction, map: "fk_event_name_season_year")
  session_types                session_types                  @relation(fields: [session_type_id], references: [id], onUpdate: NoAction, map: "fk_session_type_id")
  session_results              session_results[]
  session_weather_measurements session_weather_measurements[]

  @@id([event_name, season_year, session_type_id])
}

model circuits {
  id      String @id @db.VarChar(8)
  name    String
  geojson Json 

  events  events[]
}

model events {
  event_name          String
  event_official_name String
  date_start          DateTime         @db.Date
  country             String           @db.VarChar(3)
  season_year         Int              @db.SmallInt
  event_format_name   String           @db.VarChar(32)
  event_sessions      event_sessions[]
  event_formats       event_formats    @relation(fields: [event_format_name], references: [event_format_name], onUpdate: NoAction, map: "fk_event_format_name")
  seasons             seasons          @relation(fields: [season_year], references: [season_year], onUpdate: NoAction, map: "fk_season_year")
  laps                laps[]
  circuit_id          String           @db.VarChar(8)
  circuits            circuits?        @relation(fields: [circuit_id], references: [id], onUpdate: NoAction, map: "fk_circuit_id")

  @@id([event_name, season_year])
}

model laps {
  id                     BigInt                   @id @default(autoincrement())
  lap_number             Int                      @db.SmallInt
  sector_1_time          Float?                   @db.Real
  sector_2_time          Float?                   @db.Real
  sector_3_time          Float?                   @db.Real
  speedtrap_1            Int?                     @db.SmallInt
  speedtrap_2            Int?                     @db.SmallInt
  speedtrap_fl           Int?                     @db.SmallInt
  stint                  Int                      @db.SmallInt
  event_name             String
  compound_id            String                   @db.VarChar(16)
  driver_id              String                   @db.VarChar(64)
  session_type_id        String                   @db.VarChar(32)
  season_year            Int?                     @db.SmallInt
  laptime                Float?                   @default(dbgenerated("((sector_1_time + sector_2_time) + sector_3_time)")) @db.Real
  pit_in_time            Float?                   @db.Real
  pit_out_time           Float?                   @db.Real
  is_inlap               Boolean?                 @default(dbgenerated("(pit_in_time IS NOT NULL)"))
  is_outlap              Boolean?                 @default(dbgenerated("(pit_out_time IS NOT NULL)"))
  compounds              compounds                @relation(fields: [compound_id], references: [id], onUpdate: NoAction, map: "fk_compound_id")
  drivers                drivers                  @relation(fields: [driver_id], references: [id], onUpdate: NoAction, map: "fk_driver_id")
  events                 events?                  @relation(fields: [event_name, season_year], references: [event_name, season_year], onUpdate: NoAction, map: "fk_event_name_season_year")
  session_types          session_types            @relation(fields: [session_type_id], references: [id], onUpdate: NoAction, map: "fk_session_type_id")
  telemetry_measurements telemetry_measurements[]

  @@unique([session_type_id, season_year, event_name, driver_id, lap_number], map: "session_type_id_event_name_season_year_driver_id_lap_number_uni")
}
model practice_session_results {
  id              Int             @id @default(autoincrement())
  laptime         Float?          @db.Real
  gap             Float?          @db.Real
  session_results session_results @relation(fields: [id], references: [id], onUpdate: NoAction, map: "fk_session_result_id")
}

model qualifying_session_results {
  id              Int             @id @default(autoincrement())
  q1_laptime      Float?          @db.Real
  q2_laptime      Float?          @db.Real
  q3_laptime      Float?          @db.Real
  position        Int?            @db.SmallInt
  session_results session_results @relation(fields: [id], references: [id], onUpdate: NoAction, map: "fk_session_result_id")
}

model race_session_results {
  id                  Int             @id @default(autoincrement())
  total_time          Float?          @db.Real
  result_status       String?
  classified_position String?
  points              Int?            @db.SmallInt
  gap                 Float?          @db.Real
  grid_position       Int?            @default(0) @db.SmallInt
  session_results     session_results @relation(fields: [id], references: [id], onUpdate: NoAction, map: "fk_session_result_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model seasons {
  season_year        Int                  @id @db.SmallInt
  description_text   String?
  driver_numbers     driver_numbers[]
  events             events[]
  team_season_colors team_season_colors[]
}

model session_results {
  id                         Int                         @id @default(autoincrement())
  event_name                 String?
  season_year                Int?                        @db.SmallInt
  session_type_id            String?                     @db.VarChar(32)
  driver_id                  String?                     @db.VarChar(64)
  practice_session_results   practice_session_results?
  qualifying_session_results qualifying_session_results?
  race_session_results       race_session_results?
  drivers                    drivers?                    @relation(fields: [driver_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "fk_driver_id")
  event_sessions             event_sessions?             @relation(fields: [event_name, season_year, session_type_id], references: [event_name, season_year, session_type_id], onDelete: Restrict, onUpdate: NoAction, map: "fk_event_sessions_event_name_season_year_session_type_id")

  @@unique([driver_id, session_type_id, event_name, season_year])
}

model session_types {
  id             String           @id @db.VarChar(32)
  event_sessions event_sessions[]
  laps           laps[]
}

model session_weather_measurements {
  event_name      String
  season_year     Int            @db.SmallInt
  session_type_id String         @db.VarChar(32)
  time_at         Float          @db.Real
  humidity        Int            @db.SmallInt
  air_pressure    Int            @db.SmallInt
  track_temp      Int            @db.SmallInt
  air_temp        Int            @db.SmallInt
  event_sessions  event_sessions @relation(fields: [event_name, season_year, session_type_id], references: [event_name, season_year, session_type_id], onUpdate: NoAction, map: "fk_event_name_season_year_session_type_id_event_sessions")

  @@id([time_at, event_name, season_year, session_type_id])
}

model team_season_colors {
  team_id     Int     @db.SmallInt
  season_year Int     @db.SmallInt
  color       String  @db.Char(7)
  seasons     seasons @relation(fields: [season_year], references: [season_year], onUpdate: NoAction, map: "fk_seasons_season_year")
  teams       teams   @relation(fields: [team_id], references: [id], onUpdate: NoAction, map: "fk_teams_id")

  @@id([team_id, season_year])
}

model teams {
  id                  Int                   @id @default(autoincrement()) @db.SmallInt
  team_display_name   String?               @unique @db.VarChar(64)
  driver_team_changes driver_team_changes[]
  team_season_colors  team_season_colors[]
}

model telemetry_measurements {
  lap_id     BigInt
  laptime_at Float  @db.Real
  speed      Float  @db.Real
  rpm        Int    @db.SmallInt
  brake      Int    @db.SmallInt
  throttle   Int    @db.SmallInt
  distance   Float  @db.Real
  gear       Int    @db.SmallInt
  laps       laps   @relation(fields: [lap_id], references: [id], onUpdate: NoAction, map: "fk_lap_id")

  @@id([lap_id, laptime_at])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view laps_with_analytics {
  event_name      String
  session_type_id String @db.VarChar(32)
  season_year     Int    @db.SmallInt
  min_s1          Float  @db.Real
  min_s2          Float  @db.Real
  min_s3          Float  @db.Real
  best_st1        Int    @db.SmallInt
  best_st2        Int    @db.SmallInt
  best_stfl       Int    @db.SmallInt
  best_laptime    Float  @db.Real

  @@unique([event_name, session_type_id, season_year])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view driver_laps_with_analytics {
  driver_id       String? @db.VarChar(64)
  event_name      String?
  session_type_id String? @db.VarChar(32)
  season_year     Int?    @db.SmallInt
  pb_s1           Float?  @db.Real
  pb_s2           Float?  @db.Real
  pb_s3           Float?  @db.Real
  pb_st1          Int?    @db.SmallInt
  pb_st2          Int?    @db.SmallInt
  pb_stfl         Int?    @db.SmallInt
  pb_laptime      Float?  @db.Real

  @@ignore
}